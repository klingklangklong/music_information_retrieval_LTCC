LTCC - Harmony Generation Algorithm- Transform a midi file into a list of note events (each note is in the format [start, end, pitch ,velocity ,instrument] )- Divide the song into 100 equally temporally divided time frames. - For each time frame, we group the notes belonging to that frame.#Retrieve the number of most played notes per frame- We find the maximum and minimum pitch value belonging to each frame.- We obtain a harmony range curve, as the differences between highest and lowest pitches of each frame.- Given the harmony range curve, we apply a peak picking algorithm to find the relative peaks of these curves. We consider both relative low and high peaks. We assume that these values represent moments where we can have an interesting change of harmony. - We consider only the values of the harmony curve corresponding to these peaks.- We map these values [0-11]. These values represent the number of the most played notes to put in the detected harmony related to that frame.#Retrieve the most played notes per frame- For each time frame, we find the list of most played notes in the chroma domain.- We sort the list according to the number of repetitions (from the most to the lowest repeated)- We select the first N notes, where N is detected in the step before.- Post processing: if in 2 or more time frames we have the same detected most played notes, we delete the content of all these time frames but one chosen randomly between them.#Retrieve pad notes - We assign a pad note to each region corresponding to 10 consecutive detected harmony events.- The pad note is the most played note in the corresponding region.#Retrieve the harmony (triads)- For each time frame, we get the major and minor triads for each of the detected most played notes belonging to that frame.- We keep only the triads where all the notes are contained in the current detected harmony.- We select one triad per frame: the first one in the first detected event is chosen randomly; then, if in a frame there is more than one triad, we select the most similar one to the triad found in the previous step. Most similarity’s  concept = lowest sum of the differences between each sorted chroma values of the two triads.- Postprocessing step:	- Ordering: we order the notes of the triad according to their position in the most played notes’ list.	- Inversion: starting from the second triad, we order it putting on top the most similar note to the first note of the previous triad	- Filtering: a chord can be repeated only once in two consecutive steps. At the third time, we do an inversion (shift the triad of 1 position to the right).